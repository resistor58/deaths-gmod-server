

local matRefraction	= Material( "refract_ring" )
local matGlow = Material("sprites/light_glow02")

local SplodeSnd = Sound("ambient/explosions/explode_6.wav")
local WooshSnd = Sound("physics/nearmiss/whoosh_huge1.wav")

--local SplodeSnd = Sound("ambient/explosions/exp1-4.wav")

--ambient/levels/abs/electric_explosion3.wav

--ambient/wind/wind_hit1-3.wav

--physics/nearmiss/whoosh_huge1.wav
--physics/nearmiss/whoosh_huge2.wav

--physics/nearmiss/whoosh_large1.wav
--physics/nearmiss/whoosh_large4.wav

--ambient/levels/labs/teleport_preblast_suckin1.wav

--weapons/mortar/mortar_shell_incomming1.wav
--weapons/mortar/mortar_fire1.wav
--weapons/mortar/mortar_explode1-3.wav

--weapons/stinger_fire1.wav

function ENT:Initialize()

	self.Position = self.Entity:GetPos()
	--self.Position = Vector(0,0,0)
	self.Yield = 1
	Msg(self.Yield)
	self.Yieldfast = self.Yield^1.4
	self.YieldSlow = self.Yield^0.75
	self.YieldSlowest = self.Yield^0.5
	
	local yield = self.Yield
	local yieldslow = self.YieldSlow
	local yieldslowest = self.YieldSlowest
	local yieldfast = self.Yieldfast
	local Pos = self.Position
	local Norm = Vector(0,0,1)
	
	Pos = Pos + Norm * 3
	
	self.TimeLeft = CurTime() + 18
	self.GAlpha = 240
	self.GSize = 100*yieldslow
	self.GHeight = 800*yieldslow
	self.Refract = 8
	self.Size = 24
	
	--sound
	surface.PlaySound(SplodeSnd)
	
	self.smokeparticles = {}
	self.dustparticles = {}
	self.dustfade = true
	local emitter = ParticleEmitter( Pos )
	
	--big firecloud
		for i=1, math.ceil(yieldfast*220) do
			
			local spawnpos = yieldslow*Vector(math.random(-360,360),math.random(-360,330),math.random(530,760))
			--local particle = emitter:Add( "Effects/fire_cloud"..math.random(1,2), Pos + spawnpos)
			local particle = emitter:Add( "particles/flamelet"..math.random(1,5), Pos + spawnpos)
			local velvec = spawnpos:GetNormalized()
			local velmult = yieldslowest*math.random(62,76)
			particle:SetVelocity(velvec*velmult)
			particle:SetDieTime( math.Rand( 20, 23 ) )
			particle:SetStartAlpha( math.Rand(230, 250) )
			particle:SetStartSize( math.Rand( 64, 72 ) )
			particle:SetEndSize( math.Rand( 192, 256 ) )
			particle:SetRoll( math.Rand( 480, 540 ) )
			particle:SetRollDelta( math.random( -1, 1 ) )
			particle:SetColor(math.random(150,255), math.random(100,150), 100)
			particle:VelocityDecay( true )
	
			
		end
		
	--small firecloud
		for i=1, math.ceil(yieldfast*96) do
			
			local spawnpos = yieldslow*Vector(math.random(-256,256),math.random(-256,256),math.random(-96,160))
			local particle = emitter:Add( "particles/flamelet"..math.random(1,5), Pos + spawnpos)
			local velvec = spawnpos:GetNormalized()
			local velmult = yieldslowest*math.random(24,32)
			particle:SetVelocity(velvec*velmult)
			particle:SetDieTime( math.Rand( 17, 19 ) )
			particle:SetStartAlpha( math.Rand(230, 250) )
			particle:SetStartSize( math.Rand( 64, 72 ) )
			particle:SetEndSize( math.Rand( 192, 256 ) )
			particle:SetRoll( math.Rand( 480, 540 ) )
			particle:SetRollDelta( math.Rand( -1, 1 ) )
			particle:SetColor(math.random(150,255), math.random(100,150), 100)
			particle:VelocityDecay( true )
			
		end
		
	--column of fire
		for i=1, math.ceil(yieldfast*128) do
			
			local spawnpos = yieldslow*Vector(math.random(-32,32),math.random(-32,32),math.random(24,800))
			local particle = emitter:Add( "particles/flamelet"..math.random(1,5), Pos + spawnpos)
			local velvec = spawnpos:GetNormalized()
			local velmult = yieldslowest*math.random(32,64)
			particle:SetVelocity(velvec*velmult)
			particle:SetDieTime( math.Rand( 18, 20 ) )
			particle:SetStartAlpha( math.Rand(230, 250) )
			particle:SetStartSize( math.Rand( 64, 72 ) )
			particle:SetEndSize( math.Rand( 192, 256 ) )
			particle:SetRoll( math.Rand( 480, 540 ) )
			particle:SetRollDelta( math.Rand( -1, 1 ) )
			particle:SetColor(math.random(150,255), math.random(100,150), 100)
			particle:VelocityDecay( false )
			
		end
		
	-- big smoke cloud
		for i=1, math.ceil(yieldfast*384) do
			
			local spawnpos = yieldslow*Vector(math.random(-300,300),math.random(-300,300),math.random(600,1024))
			local particle = emitter:Add( "particles/smokey", Pos + spawnpos)
			local velvec = spawnpos:GetNormalized()
			local velmult = yieldslowest*math.random(60,74)
			particle:SetVelocity(velvec*velmult)
			particle:SetLifeTime( -5 )
			particle:SetDieTime( 65 )
			particle:SetStartAlpha( math.Rand( 0, 3 ) )
			particle:SetEndAlpha( math.Rand( 252, 255 ) )
			particle:SetStartSize( math.Rand( 200, 250 ) )
			particle:SetEndSize( 510 )
			particle:SetRoll( math.Rand( 480, 540 ) )
			particle:SetRollDelta( math.random( -1, 1 ) )
			particle:SetColor( 170, 170, 170 )
			particle:VelocityDecay( true )
			table.insert(self.smokeparticles,particle)
			
		end
		
		
	-- small smoke cloud
		for i=1, math.ceil(yieldfast*300) do
			
			local spawnpos = yieldslow*Vector(math.random(-384,384),math.random(-384,384),math.random(-96,128))
			local particle = emitter:Add( "particles/smokey", Pos + spawnpos)
			local velvec = spawnpos:GetNormalized()
			local velmult = yieldslowest*math.random(12,36)
			particle:SetVelocity(velvec*velmult)
			particle:SetLifeTime( -5 )
			particle:SetDieTime( 65 )
			particle:SetStartAlpha( 2 )
			particle:SetEndAlpha( 255 )
			particle:SetStartSize( math.Rand( 200, 250 ) )
			particle:SetEndSize( 510 )
			particle:SetRoll( math.Rand( 480, 540 ) )
			particle:SetRollDelta( math.random( -1, 1 ) )
			particle:SetColor(170,170,170)
			particle:VelocityDecay( true )
			table.insert(self.smokeparticles,particle)
			
		end
		
		
	--column of smoke
		for i=1, math.ceil(yieldfast*128) do
			
			local spawnpos = yieldslow*Vector(math.random(-32,32),math.random(-32,32),math.random(16,800))
			local particle = emitter:Add( "particles/smokey", Pos + spawnpos)
			local velvec = spawnpos:GetNormalized()
			local velmult = yieldslowest*math.random(12,64)
			particle:SetVelocity(velvec*velmult)
			particle:SetLifeTime( -5 )
			particle:SetDieTime( 65 )
			particle:SetStartAlpha( 2 )
			particle:SetEndAlpha( 255 )
			particle:SetStartSize( math.Rand( 200, 250 ) )
			particle:SetEndSize( 510 )
			particle:SetRoll( math.Rand( 480, 540 ) )
			particle:SetRollDelta( math.Rand( -1, 1 ) )
			particle:SetColor(170,170,170)
			particle:VelocityDecay( false )
			table.insert(self.smokeparticles,particle)
			
		end
			
	--fire ring
		for i=1, math.ceil(yieldfast*256) do
			
			local spawnpos = Vector(math.random(-512,512),math.random(-512,512),math.Rand(-3,3))
			local particle = emitter:Add( "particles/flamelet"..math.random(1,5), Pos + spawnpos)
			local velvec = spawnpos:GetNormalized()
			local velmult = math.random(1600,1900)
			particle:SetVelocity(velvec*velmult)
			particle:SetDieTime( yieldslowest*math.Rand( 1.5, 2 ) )
			particle:SetStartAlpha( math.Rand(180, 200) )
			particle:SetStartSize( math.Rand( 96, 128 ) )
			particle:SetEndSize(  math.Rand( 192, 256 ) )
			particle:SetRoll( math.Rand( 480, 540 ) )
			particle:SetRollDelta( math.Rand( -1, 1 ) )
			particle:SetColor(math.random(150,255), math.random(100,150), 100)
			particle:VelocityDecay( false )
			
		end

	--dust ring
		for i=1, math.ceil(yield*600) do
			
			local spawnpos = Vector(math.random(-512,512),math.random(-512,512),math.Rand(-2,4))
			local particle = emitter:Add( "particles/smokey", Pos + spawnpos)
			local velvec = spawnpos:GetNormalized()
			local velmult = math.random(1800,2000)
			particle:SetVelocity(velvec*velmult)
			particle:SetDieTime( yieldslowest*6.5 )
			particle:SetStartAlpha( 4 )
			particle:SetEndAlpha( 140 )
			particle:SetStartSize( math.Rand( 180, 220 ) )
			particle:SetEndSize( 510 )
			particle:SetRoll( math.Rand( 480, 540 ) )
			particle:SetRollDelta( math.Rand( -1, 1 ) )
			particle:SetColor( 200, 190, 140 )
			particle:VelocityDecay( false )
			
			table.insert(self.dustparticles,particle)
			
		end
		
	emitter:Finish()
		
end


function ENT:Think( )
	local timeleft = self.TimeLeft - CurTime()
	if timeleft > 0 then 
	local ftime = FrameTime()
	
	self.GAlpha = self.GAlpha - 12*ftime
	self.GSize = self.GSize - 0.1*timeleft*ftime*self.YieldSlow
	self.GHeight = self.GHeight + 75*ftime*self.YieldSlowest
	
	self.Refract = self.Refract - 2*ftime
	self.Size = self.Size + 12000*ftime
	
		if self.dustfade and math.ceil(timeleft) == 16 then
			for __,particle in pairs(self.dustparticles) do
			particle:SetStartAlpha( 60 )
			particle:SetEndAlpha( 0 )
			end
		self.dustfade = false
		end
		
	return true
	else
		for __,particle in pairs(self.smokeparticles) do
		particle:SetStartAlpha( 70 )
		particle:SetEndAlpha( 0 )
		end
	return false	
	end
end


-- Draw the effect
function ENT:Draw()
local startpos = self.Position

matGlow:SetMaterialInt("$spriterendermode",9)
matGlow:SetMaterialInt("$ignorez",1)
matGlow:SetMaterialInt("$illumfactor",8)
matGlow:SetMaterialInt("$nocull",1)

render.SetMaterial(matGlow)  -- Sets the sprite's material 
--Base glow
render.DrawSprite(startpos + Vector(0,0,self.GHeight),90*self.GSize,42*self.GSize,Color(255,245,230,self.GAlpha))
render.DrawSprite(startpos + Vector(0,0,700),20*self.GSize,55*self.GSize,Color(255,245,230,0.7*self.GAlpha))
render.DrawSprite(startpos + Vector(0,0,100),60*self.GSize,23*self.GSize,Color(255,245,230,0.7*self.GAlpha))

--outer glow
render.DrawSprite(startpos + Vector(0,0,800),700*self.GSize,460*self.GSize,Color(250,80,10,0.9*self.GAlpha))

--shockwave
	if self.Size < 32768 then
		--local Distance = EyePos():Distance( self.Entity:GetPos() )
		--local refpos = startpos + (EyePos()-self.Entity:GetPos()):GetNormal() * Distance * (self.Refract^(0.3)) * 0.8

		matRefraction:SetMaterialFloat( "$refractamount", math.sin( self.Refract * math.pi ) * 0.1 )
		render.SetMaterial( matRefraction )
		render.UpdateRefractTexture()
		--render.DrawSprite( startpos, self.Size, self.Size )

		render.DrawQuadEasy( startpos,
		Vector(0,0,1),
		self.Size, self.Size,
		Color( 255, 255, 255, 255 ) )

	end

self.Entity:DrawShadow(false)
	
end

include('shared.lua')


